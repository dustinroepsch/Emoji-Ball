{"version":3,"sources":["src/GameState.ts","src/Action.ts","src/DataExtracter.ts","src/ActionHandler.ts","src/App.ts","src/Renderer.ts","src/Stopwatch.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.2aacc0bc.map","sourceRoot":"..","sourcesContent":["export class Vector {\n    public constructor(public x: number, public y: number) { };\n\n    public add(other: Vector): Vector {\n        return new Vector(this.x + other.x, this.y + other.y);\n    }\n\n    public mag(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public scale(value: number): Vector {\n        return new Vector(this.x * value, this.y * value);\n    }\n\n    public norm(): Vector {\n        return this.scale(1 / this.mag());\n    }\n\n    public clampMag(max: number): Vector {\n        return this.mag() > max ? this.norm().scale(53) : this;\n    }\n\n    public dist(other: Vector): number {\n        return Math.sqrt(\n            (other.x - this.x) * (other.x - this.x)\n            + (other.y - this.y) * (other.y - this.y));\n    }\n}\n\nexport class Ball {\n    public positionMeters: Vector = new Vector(75 * 3, 75 * 3);\n    public velocityMetersPerSecond: Vector = new Vector(0, 0, );\n    public massKg: number = 70;\n\n    public radiusMeters: number = 100;\n    public sprite: string = '⚽️';\n}\n\nexport class GameState {\n    public gameWidthSoccerBalls: number = 4;\n    public gameHeightSoccerBalls: number = 7;\n    public pixelsPerMeter: number = 1;\n    public gravityMetersPerSecondSquared: number = 9.8;\n    public touchForceNewtons: number = 1500;\n\n    public ball: Ball = new Ball();\n}","export enum Actions {\n    TICK = \"TICK\",\n    CLICK = \"CLICK\",\n    SET_GAME_HEIGHT_PIXELS = \"SET_GAME_HEIGHT_PIXELS\",\n}\n\nexport interface Action {\n    type: Actions;\n    params: any;\n}","import { GameState } from \"./GameState\";\n\nexport class DataExtracter {\n    private constructor() { }\n\n    public static gameWidthMeters(state: GameState): number {\n        return state.gameWidthSoccerBalls * state.ball.radiusMeters * 2;\n    }\n\n    public static gameHeightMeters(state: GameState): number {\n        return state.gameHeightSoccerBalls * state.ball.radiusMeters * 2;\n    }\n\n    public static gameWidthPixels(state: GameState): number {\n        return this.gameWidthMeters(state) * state.pixelsPerMeter;\n    }\n\n    public static gameHeightPixels(state: GameState): number {\n        return this.gameHeightMeters(state) * state.pixelsPerMeter;\n    }\n}","import { GameState, Vector } from \"./GameState\";\nimport { Action, Actions } from \"./Action\";\nimport { DataExtracter } from \"./DataExtracter\";\n\nexport class ActionHandler {\n    public static reduce(oldState: GameState, action: Action): GameState {\n        const newState: GameState = { ...oldState }\n\n        switch (action.type) {\n            case Actions.SET_GAME_HEIGHT_PIXELS:\n                newState.pixelsPerMeter = action.params.gameHeightPixels / DataExtracter.gameHeightMeters(oldState);\n                break;\n            case Actions.TICK:\n                ActionHandler.applyGravity(newState, action.params.delta as number);\n                break;\n            case Actions.CLICK:\n                const touchPointMeters: Vector = new Vector(\n                    action.params.xPixels / oldState.pixelsPerMeter\n                    , action.params.yPixels / oldState.pixelsPerMeter);\n\n                if (touchPointMeters.dist(oldState.ball.positionMeters) < oldState.ball.radiusMeters * 1.5 ) { //add some wiggle room \n                    const accelerationY: number = oldState.touchForceNewtons / oldState.ball.massKg;\n                    newState.ball.velocityMetersPerSecond.y -= accelerationY;\n                }\n\n                break;\n            default:\n                throw new Error(`Action type: ${action.type} is unknown.`);\n        }\n\n        return newState;\n    }\n\n    private static applyGravity(stateToMutate: GameState, delta: number): void {\n        const mss: number = stateToMutate.gravityMetersPerSecondSquared;\n        stateToMutate.ball.velocityMetersPerSecond.y += mss * delta;\n        stateToMutate.ball.velocityMetersPerSecond = stateToMutate.ball.velocityMetersPerSecond.clampMag(53);\n\n        stateToMutate.ball.positionMeters = stateToMutate.ball.positionMeters.add(stateToMutate.ball.velocityMetersPerSecond);\n    }\n}","import { GameState } from \"./GameState\";\nimport { Action } from \"./Action\";\nimport { ActionHandler } from \"./ActionHandler\";\n\nexport class App {\n    public state: GameState = new GameState();\n\n    public dispatch(action: Action) {\n        //console.log(action);\n        this.state = ActionHandler.reduce(this.state, action)\n    }\n}","import { GameState } from \"./GameState\";\nimport { DataExtracter } from \"./DataExtracter\";\n\nexport class Renderer {\n    private constructor() { }\n\n    public static render(ctx: CanvasRenderingContext2D, state: GameState): void {\n        ctx.clearRect(0, 0, DataExtracter.gameWidthPixels(state), DataExtracter.gameHeightPixels(state));\n        Renderer.renderBall(ctx, state);\n    }\n\n    public static renderBall(ctx: CanvasRenderingContext2D, state: GameState): void {\n        ctx.font = ctx.font.replace(/\\d+px/g, `${state.ball.radiusMeters * 2 * state.pixelsPerMeter}px`);\n        ctx.fillText(\n            state.ball.sprite,\n            state.ball.positionMeters.x * state.pixelsPerMeter - state.ball.radiusMeters * state.pixelsPerMeter,\n            state.ball.positionMeters.y * state.pixelsPerMeter + state.ball.radiusMeters * state.pixelsPerMeter);\n\n        // ctx.beginPath();\n        // ctx.ellipse(ball.position.x, ball.position.y, ball.radius, ball.radius, 0, 0, 360, undefined);\n        // ctx.stroke();\n    }\n}","export class Stopwatch {\n    private lastTick: number;\n\n    constructor() {\n        this.lastTick = Date.now();\n    }\n\n    public readSeconds(): number {\n        const nextTickTime: number = Date.now();\n        const delta: number = nextTickTime - this.lastTick;\n        this.lastTick = nextTickTime;\n        return delta * 0.001;\n    }\n\n}","import { App } from \"./App\";\nimport { Renderer } from \"./Renderer\";\nimport { Actions } from \"./Action\";\nimport { DataExtracter } from \"./DataExtracter\";\nimport { Stopwatch } from \"./Stopwatch\";\n\nconst game: App = new App();\n\nconst canvas: HTMLCanvasElement = document.createElement('canvas');\nconst possiblyNullCtx: CanvasRenderingContext2D | null = canvas.getContext('2d');\n\nif (!possiblyNullCtx) {\n    const div: HTMLDivElement = document.createElement('div');\n    div.appendChild(document.createTextNode('Unable to create canvas context 😓'));\n    document.body.appendChild(div);\n}\n\ncanvas.addEventListener('click', (event: MouseEvent) => {\n    game.dispatch({\n        type: Actions.CLICK,\n        params: {\n            xPixels: event.pageX - canvas.offsetLeft,\n            yPixels: event.pageY - canvas.offsetTop,\n        }\n    });\n});\n\nconst ctx: CanvasRenderingContext2D = possiblyNullCtx as CanvasRenderingContext2D;\ndocument.body.appendChild(canvas);\n\ngame.dispatch({\n    type: Actions.SET_GAME_HEIGHT_PIXELS,\n    params: {\n        gameHeightPixels: 800\n    }\n})\n\nconst watch = new Stopwatch();\n\nsetInterval( () => {\n    game.dispatch({\n        type: Actions.TICK,\n        params: {\n            delta: watch.readSeconds()\n        },\n    });\n\n    if (canvas.width != DataExtracter.gameWidthPixels(game.state)) {\n        canvas.width = DataExtracter.gameWidthPixels(game.state);\n    }\n\n    if (canvas.height != DataExtracter.gameHeightPixels(game.state)) {\n        canvas.height = DataExtracter.gameHeightPixels(game.state);\n    }\n\n    Renderer.render(ctx, game.state);\n}, 0.000000001);\n"]}